generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String
  address    String
  privateKey String
  network    Network
  apiKeys    ApiKey[]
  Position   Position[]
}

enum Network {
  MAINNET
  TESTNET
}

model ApiKey {
  id         Int    @id @default(autoincrement())
  key        String
  secret     String
  passphrase String
  user       User   @relation(fields: [userId], references: [id])
  userId     Int
}

model Market {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  indexPrice Float      @default(0)
  orders     Order[]
  candles    Candle[]
  pairsA     Pair[]     @relation("MarketA")
  pairsB     Pair[]     @relation("MarketB")
  Position   Position[]
}

model Pair {
  id Int @id @default(autoincrement())

  marketA   Market @relation("MarketA", fields: [marketAId], references: [id], onDelete: Cascade)
  marketAId Int

  marketB   Market @relation("MarketB", fields: [marketBId], references: [id], onDelete: Cascade)
  marketBId Int

  Coint Coint?
}

model Position {
  id Int @id @default(autoincrement())

  size Float

  status PositionStatus
  side   PositionSide

  user   User @relation(fields: [userId], references: [id])
  userId Int

  market   Market @relation(fields: [marketId], references: [id])
  marketId Int    @unique
}

enum PositionStatus {
  OPEN
  CLOSED
}

enum PositionSide {
  LONG
  SHORT
}

model Candle {
  id    Int   @id @default(autoincrement())
  close Float

  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
  marketId Int

  createdAt DateTime @default(now())
}

model Order {
  id     Int       @id @default(autoincrement())
  price  Float
  size   Float
  offset BigInt
  side   OrderSide

  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
  marketId Int
}

model Coint {
  id Int @id @default(autoincrement())

  pair   Pair @relation(fields: [pairId], references: [id], onDelete: Cascade)
  pairId Int  @unique

  cointFlag     Boolean
  pValue        Float
  tValue        Float
  criticalValue Float
  hedgeRatio    Float
  zeroCrossing  Float
}

enum OrderSide {
  BID
  ASK
}
