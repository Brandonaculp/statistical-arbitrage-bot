generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/statbot"
}

model Account {
  id              String        @id
  name            String
  address         String
  privateKey      String
  starkPrivateKey String
  network         Network
  apiKey          ApiKey?
  positions       Position[]
  positionId      String
  ActiveOrder     ActiveOrder[]
  quoteBalance    Float?
}

enum Network {
  MAINNET
  TESTNET
}

model ApiKey {
  id         Int     @id @default(autoincrement())
  key        String
  secret     String
  passphrase String
  account    Account @relation(fields: [accountId], references: [id])
  accountId  String  @unique
}

model Market {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  indexPrice   Float         @default(0)
  orders       Order[]
  candles      Candle[]
  pairsA       Pair[]        @relation("MarketA")
  pairsB       Pair[]        @relation("MarketB")
  positions    Position[]
  activeOrders ActiveOrder[]
  Trade        Trade[]
}

model Pair {
  id Int @id @default(autoincrement())

  marketA   Market @relation("MarketA", fields: [marketAId], references: [id], onDelete: Cascade)
  marketAId Int

  marketB   Market @relation("MarketB", fields: [marketBId], references: [id], onDelete: Cascade)
  marketBId Int

  Coint Coint?
}

model Position {
  id Int @id @default(autoincrement())

  size Float

  side PositionSide

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  market   Market @relation(fields: [marketId], references: [id])
  marketId Int    @unique
}

enum PositionSide {
  LONG
  SHORT
}

model ActiveOrder {
  id            String @id
  size          Float
  remainingSize Float
  price         Float

  type ActiveOrderType

  status ActiveOrderStatus
  side   ActiveOrderSide

  market   Market @relation(fields: [marketId], references: [id])
  marketId Int

  account   Account @relation(fields: [accountId], references: [id])
  accountId String
}

enum ActiveOrderType {
  MARKET
  LIMIT
  STOP
  TRAILING_STOP
  TAKE_PROFIT
  LIQUIDATED
  LIQUIDATION
}

enum ActiveOrderStatus {
  PENDING
  OPEN
  UNTRIGGERED
}

enum ActiveOrderSide {
  BUY
  SELL
}

model Candle {
  id    Int   @id @default(autoincrement())
  close Float

  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
  marketId Int

  createdAt DateTime
}

model Order {
  id     Int       @id @default(autoincrement())
  price  Float
  size   Float
  offset BigInt
  side   OrderSide

  market   Market @relation(fields: [marketId], references: [id], onDelete: Cascade)
  marketId Int
}

enum OrderSide {
  BID
  ASK
}

model Trade {
  id Int @id @default(autoincrement())

  side  TradeSide
  size  Float
  price Float

  market   Market @relation(fields: [marketId], references: [id])
  marketId Int

  createdAt DateTime
}

enum TradeSide {
  BUY
  SELL
}

model Coint {
  id Int @id @default(autoincrement())

  pair   Pair @relation(fields: [pairId], references: [id], onDelete: Cascade)
  pairId Int  @unique

  cointFlag     Boolean
  pValue        Float
  tValue        Float
  criticalValue Float
  hedgeRatio    Float
  zeroCrossing  Float
}
