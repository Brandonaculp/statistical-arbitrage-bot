generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String
  privateKey String   @unique
  apiKey     ApiKey?
  account    Account?
}

model Account {
  id           String        @id
  quoteBalance Float         @default(0)
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  starkKey     StarkKey?
  activeOrders ActiveOrder[]
  positions    Position[]
}

model ApiKey {
  id         String @id @default(uuid())
  key        String
  passphrase String
  secret     String
  user       User   @relation(fields: [userId], references: [id])
  userId     String @unique
}

model StarkKey {
  id                   String  @id @default(uuid())
  publicKey            String
  privateKey           String
  publicKeyYCoordinate String
  account              Account @relation(fields: [accountId], references: [id])
  accountId            String  @unique
}

model Market {
  id           String        @id @default(uuid())
  name         String        @unique
  indexPrice   Float
  activeOrders ActiveOrder[]
  positions    Position[]
}

model ActiveOrder {
  id            String            @id
  size          Float
  remainingSize Float
  price         Float
  type          ActiveOrderType
  status        ActiveOrderStatus
  side          ActiveOrderSide
  market        Market            @relation(fields: [marketId], references: [id])
  marketId      String
  account       Account           @relation(fields: [accountId], references: [id])
  accountId     String
}

enum ActiveOrderType {
  MARKET
  LIMIT
  STOP
  TRAILING_STOP
  TAKE_PROFIT
  LIQUIDATED
  LIQUIDATION
}

enum ActiveOrderStatus {
  PENDING
  OPEN
  UNTRIGGERED
}

enum ActiveOrderSide {
  BUY
  SELL
}

model Position {
  id        String       @id
  size      Float
  side      PositionSide
  market    Market       @relation(fields: [marketId], references: [id])
  marketId  String       @unique
  account   Account      @relation(fields: [accountId], references: [id])
  accountId String
}

enum PositionSide {
  LONG
  SHORT
}
